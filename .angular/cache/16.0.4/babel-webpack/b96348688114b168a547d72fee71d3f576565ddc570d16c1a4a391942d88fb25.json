{"ast":null,"code":"import _asyncToGenerator from \"D:/Schneider_Electric_France/trial/angular-qr-code-sample/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { isDevMode, Directive, Input, Component, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport qrcode from 'qrcode';\nfunction QrCodeComponent_canvas_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"canvas\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"qrCode\", ctx_r0.value)(\"qrCodeErrorCorrectionLevel\", ctx_r0.errorCorrectionLevel)(\"qrCodeCenterImageSrc\", ctx_r0.centerImageSrc)(\"qrCodeCenterImageWidth\", ctx_r0.centerImageSize)(\"qrCodeCenterImageHeight\", ctx_r0.centerImageSize)(\"qrCodeMargin\", ctx_r0.margin)(\"width\", ctx_r0.size)(\"height\", ctx_r0.size)(\"darkColor\", ctx_r0.darkColor)(\"lightColor\", ctx_r0.lightColor);\n  }\n}\nconst validColorRegex = /^#(?:[0-9a-fA-F]{3,4}){1,2}$/;\nlet QrCodeDirective = /*#__PURE__*/(() => {\n  class QrCodeDirective {\n    constructor(viewContainerRef) {\n      this.viewContainerRef = viewContainerRef;\n      // eslint-disable-next-line @angular-eslint/no-input-rename\n      this.errorCorrectionLevel = QrCodeDirective.DEFAULT_ERROR_CORRECTION_LEVEL;\n      this.darkColor = \"#000000FF\";\n      this.lightColor = \"#FFFFFFFF\";\n      // eslint-disable-next-line @angular-eslint/no-input-rename\n      this.margin = 16;\n    }\n    ngOnChanges() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if (!_this.value) {\n          return;\n        }\n        if (_this.version && _this.version > 40) {\n          console.warn(\"[qrCode] max version is 40, clamping\");\n          _this.version = 40;\n        } else if (_this.version && _this.version < 1) {\n          console.warn(\"[qrCode] min version is 1, clamping\");\n          _this.version = 1;\n        } else if (_this.version !== undefined && isNaN(_this.version)) {\n          console.warn(\"[qrCode] version should be set to a number, defaulting to auto\");\n          _this.version = undefined;\n        }\n        const canvas = _this.viewContainerRef.element.nativeElement;\n        if (!canvas) {\n          // native element not available on server side rendering\n          return;\n        }\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n          context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n        }\n        const errorCorrectionLevel = _this.errorCorrectionLevel ?? QrCodeDirective.DEFAULT_ERROR_CORRECTION_LEVEL;\n        const dark = validColorRegex.test(_this.darkColor) ? _this.darkColor : undefined;\n        const light = validColorRegex.test(_this.lightColor) ? _this.lightColor : undefined;\n        if (isDevMode()) {\n          if (!dark && _this.darkColor) {\n            console.error(\"[ng-qrcode] darkColor set to invalid value, must be RGBA hex color string, eg: #3050A1FF\");\n          }\n          if (!light && _this.lightColor) {\n            console.error(\"[ng-qrcode] lightColor set to invalid value, must be RGBA hex color string, eg: #3050A130\");\n          }\n        }\n        yield qrcode.toCanvas(canvas, _this.value, {\n          version: _this.version,\n          errorCorrectionLevel,\n          width: _this.width,\n          margin: _this.margin,\n          color: {\n            dark,\n            light\n          }\n        });\n        const centerImageSrc = _this.centerImageSrc;\n        const centerImageWidth = getIntOrDefault(_this.centerImageWidth, QrCodeDirective.DEFAULT_CENTER_IMAGE_SIZE);\n        const centerImageHeight = getIntOrDefault(_this.centerImageHeight, QrCodeDirective.DEFAULT_CENTER_IMAGE_SIZE);\n        if (centerImageSrc && context) {\n          if (!_this.centerImage) {\n            _this.centerImage = new Image(centerImageWidth, centerImageHeight);\n          }\n          const centerImage = _this.centerImage;\n          if (centerImageSrc !== _this.centerImage.src) {\n            centerImage.src = centerImageSrc;\n          }\n          if (centerImageWidth !== _this.centerImage.width) {\n            centerImage.width = centerImageWidth;\n          }\n          if (centerImageHeight !== _this.centerImage.height) {\n            centerImage.height = centerImageHeight;\n          }\n          const doDrawImage = () => {\n            context.drawImage(centerImage, canvas.width / 2 - centerImageWidth / 2, canvas.height / 2 - centerImageHeight / 2, centerImageWidth, centerImageHeight);\n          };\n          centerImage.onload = doDrawImage;\n          if (centerImage.complete) {\n            doDrawImage();\n          }\n        }\n      })();\n    }\n  }\n  QrCodeDirective.DEFAULT_ERROR_CORRECTION_LEVEL = \"M\";\n  QrCodeDirective.DEFAULT_CENTER_IMAGE_SIZE = 40;\n  QrCodeDirective.ɵfac = function QrCodeDirective_Factory(t) {\n    return new (t || QrCodeDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n  };\n  QrCodeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: QrCodeDirective,\n    selectors: [[\"canvas\", \"qrCode\", \"\"]],\n    inputs: {\n      value: [\"qrCode\", \"value\"],\n      version: [\"qrCodeVersion\", \"version\"],\n      errorCorrectionLevel: [\"qrCodeErrorCorrectionLevel\", \"errorCorrectionLevel\"],\n      width: \"width\",\n      height: \"height\",\n      darkColor: \"darkColor\",\n      lightColor: \"lightColor\",\n      centerImageSrc: [\"qrCodeCenterImageSrc\", \"centerImageSrc\"],\n      centerImageWidth: [\"qrCodeCenterImageWidth\", \"centerImageWidth\"],\n      centerImageHeight: [\"qrCodeCenterImageHeight\", \"centerImageHeight\"],\n      margin: [\"qrCodeMargin\", \"margin\"]\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return QrCodeDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction getIntOrDefault(value, defaultValue) {\n  if (value === undefined || value === \"\") {\n    return defaultValue;\n  }\n  if (typeof value === \"string\") {\n    return parseInt(value, 10);\n  }\n  return value;\n}\nlet QrCodeComponent = /*#__PURE__*/(() => {\n  class QrCodeComponent {}\n  QrCodeComponent.ɵfac = function QrCodeComponent_Factory(t) {\n    return new (t || QrCodeComponent)();\n  };\n  QrCodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: QrCodeComponent,\n    selectors: [[\"qr-code\"]],\n    inputs: {\n      value: \"value\",\n      size: \"size\",\n      darkColor: \"darkColor\",\n      lightColor: \"lightColor\",\n      errorCorrectionLevel: \"errorCorrectionLevel\",\n      centerImageSrc: \"centerImageSrc\",\n      centerImageSize: \"centerImageSize\",\n      margin: \"margin\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"qrCode\", \"qrCodeErrorCorrectionLevel\", \"qrCodeCenterImageSrc\", \"qrCodeCenterImageWidth\", \"qrCodeCenterImageHeight\", \"qrCodeMargin\", \"width\", \"height\", \"darkColor\", \"lightColor\", 4, \"ngIf\"], [3, \"qrCode\", \"qrCodeErrorCorrectionLevel\", \"qrCodeCenterImageSrc\", \"qrCodeCenterImageWidth\", \"qrCodeCenterImageHeight\", \"qrCodeMargin\", \"width\", \"height\", \"darkColor\", \"lightColor\"]],\n    template: function QrCodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, QrCodeComponent_canvas_0_Template, 1, 10, \"canvas\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.value);\n      }\n    },\n    dependencies: [i1.NgIf, QrCodeDirective],\n    encapsulation: 2\n  });\n  return QrCodeComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet QrCodeModule = /*#__PURE__*/(() => {\n  class QrCodeModule {}\n  QrCodeModule.ɵfac = function QrCodeModule_Factory(t) {\n    return new (t || QrCodeModule)();\n  };\n  QrCodeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: QrCodeModule\n  });\n  QrCodeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return QrCodeModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of ng-qrcode\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QrCodeComponent, QrCodeDirective, QrCodeModule };\n//# sourceMappingURL=ng-qrcode.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}