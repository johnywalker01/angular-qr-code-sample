{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"ngx-drag-drop\";\nimport * as i3 from \"../qr-code-scanner/qr-code-scanner.component\";\nconst _c0 = function (a0) {\n  return {\n    \"cell-on\": a0\n  };\n};\nfunction MapQrComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵlistener(\"dndDragover\", function MapQrComponent_div_6_Template_div_dndDragover_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onDragover($event));\n    })(\"dndDrop\", function MapQrComponent_div_6_Template_div_dndDrop_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const item_r2 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.onDrop($event, item_r2.id));\n    });\n    i0.ɵɵelementStart(1, \"span\", 12);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, item_r2.data.name !== \"\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r2.data.value);\n  }\n}\nfunction MapQrComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"dndDraggable\", item_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", item_r6.value, \" - \", item_r6.name, \" \");\n  }\n}\nlet MapQrComponent = /*#__PURE__*/(() => {\n  class MapQrComponent {\n    // draggable = {\n    //   // note that data is handled with JSON.stringify/JSON.parse\n    //   // only set simple data or POJO's as methods will be lost\n    //   data: \"myDragData\",\n    //   effectAllowed: \"all\",\n    //   disable: false,\n    //   handle: false\n    // };\n    constructor() {\n      this.options = [];\n      this.cubicles = [];\n      // this.initDragItems();\n      for (let index = 0; index < 9; index++) {\n        this.cubicles.push({\n          id: (index + 1).toString(),\n          data: {\n            name: '',\n            value: ''\n          }\n        });\n      }\n    }\n    ngAfterViewInit() {\n      this.modifyQrStringArray([]);\n    }\n    getRandomNumbers() {\n      const randomNumbers = new Uint32Array(10);\n      crypto.getRandomValues(randomNumbers);\n      for (const [index, value] of randomNumbers.entries()) {\n        console.log(value);\n        this.options.push({\n          name: value.toString(),\n          value: (index + 1).toString()\n        });\n      }\n    }\n    getRandomInt(min, max) {\n      // Create byte array and fill with 1 random number\n      var byteArray = new Uint32Array(1);\n      crypto.getRandomValues(byteArray);\n      var range = max - min + 1;\n      var max_range = 256;\n      if (byteArray[0] >= Math.floor(max_range / range) * range) return this.getRandomInt(min, max);\n      return min + byteArray[0] % range;\n    }\n    onDragover(event) {\n      // console.log(\"dragover\", JSON.stringify(event, null, 2));\n    }\n    onDrop(event, itemId) {\n      // console.log(\"dropped\", itemId, event.data);\n      this.insertQrToArray(itemId, event.data);\n    }\n    insertQrToArray(itemId, incomingQrData) {\n      let filteredList = this.cubicles.filter(item => item.id === itemId);\n      if (filteredList.length) {\n        filteredList[0].data = incomingQrData;\n      }\n    }\n    handleApplyButton($event) {\n      console.log(this.cubicles);\n      console.log(JSON.stringify(this.cubicles));\n    }\n    handleQrCodeList(qrCodes) {\n      console.log({\n        qrCodes\n      });\n      this.modifyQrStringArray(qrCodes);\n    }\n    modifyQrStringArray(qrCodes) {\n      let tempQrCodes = [];\n      for (const [index, value] of qrCodes.entries()) {\n        tempQrCodes.push({\n          name: value.toString(),\n          value: (index + 1).toString()\n        });\n      }\n      this.options = tempQrCodes;\n    }\n  }\n  MapQrComponent.ɵfac = function MapQrComponent_Factory(t) {\n    return new (t || MapQrComponent)();\n  };\n  MapQrComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapQrComponent,\n    selectors: [[\"app-map-qr\"]],\n    decls: 14,\n    vars: 2,\n    consts: [[1, \"container\"], [1, \"cubicle-main\"], [1, \"cubicle-box\"], [1, \"cubicle\"], [\"class\", \"cell\", \"dndDropzone\", \"\", 3, \"ngClass\", \"dndDragover\", \"dndDrop\", 4, \"ngFor\", \"ngForOf\"], [1, \"scan-container\"], [3, \"onScan\"], [1, \"scanned-results\"], [\"class\", \"qr-scanned-cell\", 3, \"dndDraggable\", 4, \"ngFor\", \"ngForOf\"], [1, \"button-group\"], [3, \"click\"], [\"dndDropzone\", \"\", 1, \"cell\", 3, \"ngClass\", \"dndDragover\", \"dndDrop\"], [1, \"filled-cell\"], [1, \"qr-scanned-cell\", 3, \"dndDraggable\"]],\n    template: function MapQrComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h4\");\n        i0.ɵɵtext(4, \"Cubicle A1\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵtemplate(6, MapQrComponent_div_6_Template, 3, 4, \"div\", 4);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(7, \"div\", 5)(8, \"app-qr-code-scanner\", 6);\n        i0.ɵɵlistener(\"onScan\", function MapQrComponent_Template_app_qr_code_scanner_onScan_8_listener($event) {\n          return ctx.handleQrCodeList($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵtemplate(10, MapQrComponent_div_10_Template, 2, 3, \"div\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"div\", 9)(12, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function MapQrComponent_Template_button_click_12_listener($event) {\n          return ctx.handleApplyButton($event);\n        });\n        i0.ɵɵtext(13, \"Apply\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.cubicles);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.options);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i2.DndDraggableDirective, i2.DndDropzoneDirective, i3.QrCodeScannerComponent],\n    styles: [\".container[_ngcontent-%COMP%]{width:100%;height:auto}.cubicle-main[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;width:100%;gap:12px;align-content:center;justify-content:center}.cubicle-box[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center}.cubicle[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;width:200px;gap:12px;align-content:center;justify-content:center}.cell[_ngcontent-%COMP%]{width:40px;height:40px;border-radius:50%;border:1px solid green}.cell-on[_ngcontent-%COMP%]{background-color:#adff2f}.scanned-results[_ngcontent-%COMP%]{display:flex;flex-direction:column;width:200px;padding:10px;gap:5px}.qr-scanned-cell[_ngcontent-%COMP%]{border:1px solid lightgreen;border-radius:7px;min-width:20px;min-height:20px;padding-left:8px}.filled-cell[_ngcontent-%COMP%]{display:flex;justify-content:center;height:90%;align-items:center}.button-group[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;gap:10px}\"]\n  });\n  return MapQrComponent;\n})();\nexport { MapQrComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}